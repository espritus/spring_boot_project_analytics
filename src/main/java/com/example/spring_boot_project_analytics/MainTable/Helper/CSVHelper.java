package com.example.spring_boot_project_analytics.MainTable.Helper;

import com.example.spring_boot_project_analytics.MainTable.dto.RecordDto;
import com.example.spring_boot_project_analytics.MainTable.entity.Record;
import com.example.spring_boot_project_analytics.MainTable.mapper.CSVRecordMapper;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.springframework.web.multipart.MultipartFile;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class CSVHelper {
    public static String TYPE = "text/csv";
//    private static final String[] HEADERS = {
//            "product id",
//            "Date",
//            "balance start",
//            "Minimum",
//            "Maximum",
//            "Transit",
//            "Backorder",
//            "Sales",
//            "product category",
//    };

    public static boolean hasCSVFormat(MultipartFile file) {
        return TYPE.equals(file.getContentType());
    }

    public static List<Record> csvToRecord(InputStream is) {
        try (BufferedReader fileReader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
             CSVParser csvParser = new CSVParser(fileReader,
                     CSVFormat.DEFAULT.withFirstRecordAsHeader().withIgnoreHeaderCase().withTrim())) {

            List<RecordDto> records = new ArrayList<>();

            Iterable<CSVRecord> csvRecords = csvParser.getRecords();

            for (CSVRecord csvRecord : csvRecords) {
                RecordDto record = new RecordDto(
                        null, // ID is not present in CSV, it will be generated by the database
                        parseInt(csvRecord.get("product id")),
                        csvRecord.get("Date"),
                        parseDouble(csvRecord.get("balance start")),
                        parseInt(csvRecord.get("Minimum")),
                        parseInt(csvRecord.get("Maximum")),
                        parseDouble(csvRecord.get("Transit")),
                        parseDouble(csvRecord.get("Backorder")),
                        parseInt(csvRecord.get("Sales")),
                        csvRecord.get("product category")
                );

                records.add(record);
            }

            return records.stream()
                   .map(CSVRecordMapper::mapToData)
                   .collect(Collectors.toList());
        } catch (IOException e) {
            throw new RuntimeException("Fail to parse CSV file: " + e.getMessage());
        }
    }

    // Utility methods to handle empty strings and provide default values
    private static double parseDouble(String value) {
        return value.isEmpty() ? 0.0 : Double.parseDouble(value);
    }

    private static int parseInt(String value) {
        return value.isEmpty() ? 0 : Integer.parseInt(value);
    }
}
